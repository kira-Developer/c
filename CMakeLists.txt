cmake_minimum_required(VERSION 3.17)
set(CMAKE_TOOLCHAIN_FILE "C:/vcpkg/scripts/buildsystems/vcpkg.cmake")
project(C C)

set(CMAKE_C_STANDARD 99)

find_package(glfw3 CONFIG REQUIRED)
find_package(unofficial-libmariadb CONFIG REQUIRED)
find_package(CURL CONFIG REQUIRED)
find_package(GDAL REQUIRED)
find_package(Boost REQUIRED)
find_package(unofficial-angle CONFIG REQUIRED)
add_executable(Glfw GLFW/Glfw.c)
add_executable(Query Query.c)
add_executable(Variables Variables.c)
add_executable(Printf Printf.c)
add_executable(Constants Constants.c)
add_executable(GettingUserInput GettingUserInput.c)
add_executable(WorkingWithNumbers WorkingWithNumbers.c)
add_executable(BuildingABasicCalculator BuildingABasicCalculator.c)
add_executable(BuildingAMadLibsGame BuildingAMadLibsGame.c)
add_executable(Array Array.c)
add_executable(Functions Functions.c)
add_executable(ReturnStatement ReturnStatement.c)
add_executable(IfStatement IfStatement.c)
add_executable(BuildingABetterCalculator BuildingABetterCalculator.c)
add_executable(Structs Structs.c)
add_executable(WhileLoops WhileLoops.c)
add_executable(BuildingAGuessingGame BuildingAGuessingGame.c)
add_executable(ForLoops ForLoops.c)
add_executable(ArraysAndNestedLoops ArraysAndNestedLoops.c)
add_executable(MemoryAddresses MemoryAddresses.c)
add_executable(Pointers Pointers.c)
add_executable(DereferencingPointers DereferencingPointers.c)
add_executable(WritingFiles WritingFiles.c)
add_executable(ReadingFiles ReadingFiles.c)
add_executable(getDataFromGithub WEBSCRAPER/getDataFromGithub.c)
add_executable(GreatValue Applications/GreatValue.c)
add_executable( DigitalClock Applications/DigitalClock.c)
add_executable(StudentRecordManagementSystem Applications/StudentRecordManagementSystem.c)
add_executable(WinSock2 HackingTools/WinSock2.c)
add_executable(server HackingTools/server.c)
add_executable(client HackingTools/client.c)
target_include_directories(Query PRIVATE ${GDAL_INCLUDE_DIRS})
include_directories(getDataFromGithub  PUBLIC ${Boost_INCLUDE_DIR})
target_link_libraries(Query PRIVATE ${GDAL_LIBRARIES})
target_link_libraries(getDataFromGithub PUBLIC  CURL::libcurl)
target_link_libraries(Glfw PUBLIC glfw)
target_link_libraries(Query PUBLIC libmariadb mariadbclient)
target_link_libraries(Glfw PRIVATE unofficial::angle::libEGL unofficial::angle::libANGLE unofficial::angle::libGLESv2 unofficial::angle::angle_common)
